version: "3.8"

services:
  data-receiver:
    container_name: data-receiver
    image: efremovich/data-receiver
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
      - "18880:8080"
      - "8090:8090"
    depends_on:
      - postgres
      - creator-db
      - nats
  postgres:
    image: postgres:15.4
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5445:5432"
  nats:
    container_name: nats
    image: nats:2.10.26
    command: -js
    restart: unless-stopped
    ports:
      - "4222:4222"
  creator-db:
    image: postgres:15.4
    restart: "on-failure" # контейнер может не отработать с первого раза, если postgres медленно стартует
    entrypoint:
      - /bin/sh
      - -c
      - |
        psql postgres://postgres:postgres@postgres:5432 -c 'CREATE DATABASE erp_db WITH ENCODING = "UTF8"';
        psql postgres://postgres:postgres@postgres:5432 -c 'CREATE DATABASE superset_db WITH ENCODING = "UTF8"';
    depends_on:
      - postgres
  migrator-db:
    build:
      context: .
      dockerfile: ./migrations/Dockerfile
    restart: on-failure
    environment:
      DB_HOST: postgres
  jaeger:
    image: jaegertracing/all-in-one:1.48
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # web
      - "14268:14268"
      - "9411:9411"
  grafana:
    image: grafana/grafana-oss:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - ./grafana_data:/var/lib/grafana
  prometheus:
    image: prom/prometheus:v2.37.9
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./infra/alerts.yml:/etc/prometheus/alerts.yml
      - ./prometheus_data:/prometheus
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.23.0
    ports:
      - "9115:9115"
    volumes:
      - ./infra/blackbox.yml:/etc/blackbox_exporter/config.yml

  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      # - --collector.filesystem.ignored-mount-points="^(/dev|/proc|/sys|/var/lib/docker|/run/docker|/var/lib/containers)($|/)"

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3030:3000"
    volumes:
      - ./metabase-data:/metabase-data
    environment:
      MB_DB_FILE: /metabase-data/metabase.db

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - "8088:8088" # Пробрасываем порт для доступа к Superset
    volumes:
      - ./superset:/app/superset_home # Указываем том для хранения данных
      - ./config/superset_config.py:/app/pythonpath/superset_config.py #
    environment:
      SUPERSET_ENV: production
      SUPERSET_SECRET_KEY: 5jao+D1msimAO3C3nUTEpM/j/stVyMM2LqD35Z9B/5AN8dHwxAqPBM8w
      DATABASE_DIALECT: postgresql
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: postgres # Используем ваш существующий PostgreSQL
      DATABASE_PORT: 5432
      DATABASE_DB: superset_db
      REDIS_HOST: redis # Для кеширования и асинхронных задач
    restart: always

  redis:
    image: redis:7
    container_name: superset_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  superset:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  metabase-data:
    driver: local
