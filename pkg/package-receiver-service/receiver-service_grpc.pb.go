// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: receiver-service.proto

package package_receiver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PackageReceiver_CheckHealth_FullMethodName = "/package_receiver.PackageReceiver/CheckHealth"
	PackageReceiver_GetTP_FullMethodName       = "/package_receiver.PackageReceiver/GetTP"
)

// PackageReceiverClient is the client API for PackageReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageReceiverClient interface {
	CheckHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTP(ctx context.Context, in *GetTPRequest, opts ...grpc.CallOption) (*GetTPResponse, error)
}

type packageReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageReceiverClient(cc grpc.ClientConnInterface) PackageReceiverClient {
	return &packageReceiverClient{cc}
}

func (c *packageReceiverClient) CheckHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PackageReceiver_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageReceiverClient) GetTP(ctx context.Context, in *GetTPRequest, opts ...grpc.CallOption) (*GetTPResponse, error) {
	out := new(GetTPResponse)
	err := c.cc.Invoke(ctx, PackageReceiver_GetTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageReceiverServer is the server API for PackageReceiver service.
// All implementations must embed UnimplementedPackageReceiverServer
// for forward compatibility
type PackageReceiverServer interface {
	CheckHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetTP(context.Context, *GetTPRequest) (*GetTPResponse, error)
	mustEmbedUnimplementedPackageReceiverServer()
}

// UnimplementedPackageReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedPackageReceiverServer struct {
}

func (UnimplementedPackageReceiverServer) CheckHealth(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedPackageReceiverServer) GetTP(context.Context, *GetTPRequest) (*GetTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTP not implemented")
}
func (UnimplementedPackageReceiverServer) mustEmbedUnimplementedPackageReceiverServer() {}

// UnsafePackageReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageReceiverServer will
// result in compilation errors.
type UnsafePackageReceiverServer interface {
	mustEmbedUnimplementedPackageReceiverServer()
}

func RegisterPackageReceiverServer(s grpc.ServiceRegistrar, srv PackageReceiverServer) {
	s.RegisterService(&PackageReceiver_ServiceDesc, srv)
}

func _PackageReceiver_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageReceiverServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageReceiver_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageReceiverServer).CheckHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageReceiver_GetTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageReceiverServer).GetTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageReceiver_GetTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageReceiverServer).GetTP(ctx, req.(*GetTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageReceiver_ServiceDesc is the grpc.ServiceDesc for PackageReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "package_receiver.PackageReceiver",
	HandlerType: (*PackageReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealth",
			Handler:    _PackageReceiver_CheckHealth_Handler,
		},
		{
			MethodName: "GetTP",
			Handler:    _PackageReceiver_GetTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receiver-service.proto",
}
