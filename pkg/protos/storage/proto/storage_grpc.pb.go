// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcStorageClient is the client API for RpcStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcStorageClient interface {
	// Получение файла по ID
	GetFile(ctx context.Context, in *RequestGetFile, opts ...grpc.CallOption) (RpcStorage_GetFileClient, error)
	// Получение файла по ID с атрибутами
	GetFileWithAttrs(ctx context.Context, in *RequestGetFileWithAttrs, opts ...grpc.CallOption) (RpcStorage_GetFileWithAttrsClient, error)
	// Загрузка нового файла или перезапись существующего
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (RpcStorage_SaveFileClient, error)
	// Удаление файла по ID
	RemoveFile(ctx context.Context, in *RequestRemoveFile, opts ...grpc.CallOption) (*ResponseRemoveFile, error)
	// Обновление атрибутов файла
	SetFileAttrs(ctx context.Context, in *RequestSetFileAttrs, opts ...grpc.CallOption) (*ResponseSetFileAttrs, error)
	// Получение атрибутов файла
	GetFileAttrs(ctx context.Context, in *RequestGetFileAttrs, opts ...grpc.CallOption) (*ResponseGetFileAttrs, error)
}

type rpcStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcStorageClient(cc grpc.ClientConnInterface) RpcStorageClient {
	return &rpcStorageClient{cc}
}

func (c *rpcStorageClient) GetFile(ctx context.Context, in *RequestGetFile, opts ...grpc.CallOption) (RpcStorage_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcStorage_ServiceDesc.Streams[0], "/proto.RpcStorage/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcStorageGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RpcStorage_GetFileClient interface {
	Recv() (*ResponseGetFile, error)
	grpc.ClientStream
}

type rpcStorageGetFileClient struct {
	grpc.ClientStream
}

func (x *rpcStorageGetFileClient) Recv() (*ResponseGetFile, error) {
	m := new(ResponseGetFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcStorageClient) GetFileWithAttrs(ctx context.Context, in *RequestGetFileWithAttrs, opts ...grpc.CallOption) (RpcStorage_GetFileWithAttrsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcStorage_ServiceDesc.Streams[1], "/proto.RpcStorage/GetFileWithAttrs", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcStorageGetFileWithAttrsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RpcStorage_GetFileWithAttrsClient interface {
	Recv() (*ResponseGetFileWithAttrs, error)
	grpc.ClientStream
}

type rpcStorageGetFileWithAttrsClient struct {
	grpc.ClientStream
}

func (x *rpcStorageGetFileWithAttrsClient) Recv() (*ResponseGetFileWithAttrs, error) {
	m := new(ResponseGetFileWithAttrs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcStorageClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (RpcStorage_SaveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcStorage_ServiceDesc.Streams[2], "/proto.RpcStorage/SaveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcStorageSaveFileClient{stream}
	return x, nil
}

type RpcStorage_SaveFileClient interface {
	Send(*RequestSaveFile) error
	CloseAndRecv() (*ResponseSaveFile, error)
	grpc.ClientStream
}

type rpcStorageSaveFileClient struct {
	grpc.ClientStream
}

func (x *rpcStorageSaveFileClient) Send(m *RequestSaveFile) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcStorageSaveFileClient) CloseAndRecv() (*ResponseSaveFile, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseSaveFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcStorageClient) RemoveFile(ctx context.Context, in *RequestRemoveFile, opts ...grpc.CallOption) (*ResponseRemoveFile, error) {
	out := new(ResponseRemoveFile)
	err := c.cc.Invoke(ctx, "/proto.RpcStorage/RemoveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcStorageClient) SetFileAttrs(ctx context.Context, in *RequestSetFileAttrs, opts ...grpc.CallOption) (*ResponseSetFileAttrs, error) {
	out := new(ResponseSetFileAttrs)
	err := c.cc.Invoke(ctx, "/proto.RpcStorage/SetFileAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcStorageClient) GetFileAttrs(ctx context.Context, in *RequestGetFileAttrs, opts ...grpc.CallOption) (*ResponseGetFileAttrs, error) {
	out := new(ResponseGetFileAttrs)
	err := c.cc.Invoke(ctx, "/proto.RpcStorage/GetFileAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcStorageServer is the server API for RpcStorage service.
// All implementations must embed UnimplementedRpcStorageServer
// for forward compatibility
type RpcStorageServer interface {
	// Получение файла по ID
	GetFile(*RequestGetFile, RpcStorage_GetFileServer) error
	// Получение файла по ID с атрибутами
	GetFileWithAttrs(*RequestGetFileWithAttrs, RpcStorage_GetFileWithAttrsServer) error
	// Загрузка нового файла или перезапись существующего
	SaveFile(RpcStorage_SaveFileServer) error
	// Удаление файла по ID
	RemoveFile(context.Context, *RequestRemoveFile) (*ResponseRemoveFile, error)
	// Обновление атрибутов файла
	SetFileAttrs(context.Context, *RequestSetFileAttrs) (*ResponseSetFileAttrs, error)
	// Получение атрибутов файла
	GetFileAttrs(context.Context, *RequestGetFileAttrs) (*ResponseGetFileAttrs, error)
	mustEmbedUnimplementedRpcStorageServer()
}

// UnimplementedRpcStorageServer must be embedded to have forward compatible implementations.
type UnimplementedRpcStorageServer struct {
}

func (UnimplementedRpcStorageServer) GetFile(*RequestGetFile, RpcStorage_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedRpcStorageServer) GetFileWithAttrs(*RequestGetFileWithAttrs, RpcStorage_GetFileWithAttrsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileWithAttrs not implemented")
}
func (UnimplementedRpcStorageServer) SaveFile(RpcStorage_SaveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedRpcStorageServer) RemoveFile(context.Context, *RequestRemoveFile) (*ResponseRemoveFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedRpcStorageServer) SetFileAttrs(context.Context, *RequestSetFileAttrs) (*ResponseSetFileAttrs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileAttrs not implemented")
}
func (UnimplementedRpcStorageServer) GetFileAttrs(context.Context, *RequestGetFileAttrs) (*ResponseGetFileAttrs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAttrs not implemented")
}
func (UnimplementedRpcStorageServer) mustEmbedUnimplementedRpcStorageServer() {}

// UnsafeRpcStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcStorageServer will
// result in compilation errors.
type UnsafeRpcStorageServer interface {
	mustEmbedUnimplementedRpcStorageServer()
}

func RegisterRpcStorageServer(s grpc.ServiceRegistrar, srv RpcStorageServer) {
	s.RegisterService(&RpcStorage_ServiceDesc, srv)
}

func _RpcStorage_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestGetFile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcStorageServer).GetFile(m, &rpcStorageGetFileServer{stream})
}

type RpcStorage_GetFileServer interface {
	Send(*ResponseGetFile) error
	grpc.ServerStream
}

type rpcStorageGetFileServer struct {
	grpc.ServerStream
}

func (x *rpcStorageGetFileServer) Send(m *ResponseGetFile) error {
	return x.ServerStream.SendMsg(m)
}

func _RpcStorage_GetFileWithAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestGetFileWithAttrs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcStorageServer).GetFileWithAttrs(m, &rpcStorageGetFileWithAttrsServer{stream})
}

type RpcStorage_GetFileWithAttrsServer interface {
	Send(*ResponseGetFileWithAttrs) error
	grpc.ServerStream
}

type rpcStorageGetFileWithAttrsServer struct {
	grpc.ServerStream
}

func (x *rpcStorageGetFileWithAttrsServer) Send(m *ResponseGetFileWithAttrs) error {
	return x.ServerStream.SendMsg(m)
}

func _RpcStorage_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcStorageServer).SaveFile(&rpcStorageSaveFileServer{stream})
}

type RpcStorage_SaveFileServer interface {
	SendAndClose(*ResponseSaveFile) error
	Recv() (*RequestSaveFile, error)
	grpc.ServerStream
}

type rpcStorageSaveFileServer struct {
	grpc.ServerStream
}

func (x *rpcStorageSaveFileServer) SendAndClose(m *ResponseSaveFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcStorageSaveFileServer) Recv() (*RequestSaveFile, error) {
	m := new(RequestSaveFile)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcStorage_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcStorageServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcStorage/RemoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcStorageServer).RemoveFile(ctx, req.(*RequestRemoveFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcStorage_SetFileAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetFileAttrs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcStorageServer).SetFileAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcStorage/SetFileAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcStorageServer).SetFileAttrs(ctx, req.(*RequestSetFileAttrs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcStorage_GetFileAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileAttrs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcStorageServer).GetFileAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcStorage/GetFileAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcStorageServer).GetFileAttrs(ctx, req.(*RequestGetFileAttrs))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcStorage_ServiceDesc is the grpc.ServiceDesc for RpcStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RpcStorage",
	HandlerType: (*RpcStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveFile",
			Handler:    _RpcStorage_RemoveFile_Handler,
		},
		{
			MethodName: "SetFileAttrs",
			Handler:    _RpcStorage_SetFileAttrs_Handler,
		},
		{
			MethodName: "GetFileAttrs",
			Handler:    _RpcStorage_GetFileAttrs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _RpcStorage_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFileWithAttrs",
			Handler:       _RpcStorage_GetFileWithAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SaveFile",
			Handler:       _RpcStorage_SaveFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storage.proto",
}
